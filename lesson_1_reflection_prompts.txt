How did viewing a diff between two versions of a file help you see the bug that 
was introduced?

    
One, the code that was unchanged was not shown. Two, the code that was changed was shown side by side.

How could having easy access to the entire history of a file make you a more 
efficient programmer in the long term?

    
By being able to see the whole evolution of a file you get to see what was created first and can identify any bugs that may not have been found until recently. 



What do you think are the pros and cons of manually choosing when to create a 
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    
Cons: you have to manually do the commits. If you make mistakes they are recorded in the logs and create unnecasary clutter when correcting them.
Pros: you can play around with the code to get it just right before committing.



Why do you think some version control systems, like Git, allow saving multiple
 files in one commit, while others, like Google Docs, treat each file separately?

    
The Git method can be very costly from a storage perspective. Also, Google allows for the storage of all files, how would one compare changes in a photo? 

How can you use the commands git log and git diff to view the history of files?

    
Assuming the notes are accurate you can see the evolution of the files and the timestamps give you an idea of how recently it was produced.


How might using version control make you more confident to make changes that 
could break something?

    
If something breaks, you can easily isolate the problem and fix it.



\Now that you have your workspace set up, what do you want to try using Git for?

    
Fill in your answer here
